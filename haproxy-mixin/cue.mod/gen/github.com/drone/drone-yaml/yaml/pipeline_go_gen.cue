// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/drone/drone-yaml/yaml

package yaml

// Pipeline is a resource that defines a continuous
// delivery pipeline.
#Pipeline: {
	version?:     string       @go(Version)
	kind?:        string       @go(Kind)
	type?:        string       @go(Type)
	name?:        string       @go(Name)
	clone?:       #Clone       @go(Clone)
	concurrency?: #Concurrency @go(Concurrency)
	depends_on?: [...string] @go(DependsOn,[]string)
	node?: {[string]: string} @go(Node,map[string]string)
	platform?: #Platform @go(Platform)
	image_pull_secrets?: [...string] @go(PullSecrets,[]string)
	services?: [...null | #Container] @go(Services,[]*Container)
	steps?: [...null | #Container] @go(Steps,[]*Container)
	trigger?: #Conditions @go(Trigger)
	volumes?: [...null | #Volume] @go(Volumes,[]*Volume)
	workspace?: #Workspace @go(Workspace)
}

#Clone: {
	disable?:     bool @go(Disable)
	depth?:       int  @go(Depth)
	skip_verify?: bool @go(SkipVerify)
}

#Concurrency: {
	limit?: int @go(Limit)
}

#Container: {
	build?: null | #Build @go(Build,*Build)
	command?: [...string] @go(Command,[]string)
	commands?: [...string] @go(Commands,[]string)
	detach?: bool @go(Detach)
	depends_on?: [...string] @go(DependsOn,[]string)
	devices?: [...null | #VolumeDevice] @go(Devices,[]*VolumeDevice)
	dns?: [...string] @go(DNS,[]string)
	dns_search?: [...string] @go(DNSSearch,[]string)
	entrypoint?: [...string] @go(Entrypoint,[]string)
	environment?: {[string]: null | #Variable} @go(Environment,map[string]*Variable)
	extra_hosts?: [...string] @go(ExtraHosts,[]string)
	failure?:      string @go(Failure)
	image?:        string @go(Image)
	network_mode?: string @go(Network)
	name?:         string @go(Name)
	ports?: [...null | #Port] @go(Ports,[]*Port)
	privileged?: bool              @go(Privileged)
	pull?:       string            @go(Pull)
	push?:       null | #Push      @go(Push,*Push)
	resources?:  null | #Resources @go(Resources,*Resources)
	settings?: {[string]: null | #Parameter} @go(Settings,map[string]*Parameter)
	shell?: string @go(Shell)
	user?:  string @go(User)
	volumes?: [...null | #VolumeMount] @go(Volumes,[]*VolumeMount)
	when?:        #Conditions @go(When)
	working_dir?: string      @go(WorkingDir)
}

#Resources: {
	// Limits describes the maximum amount of compute
	// resources allowed.
	limits?: null | #ResourceObject @go(Limits,*ResourceObject)

	// Requests describes the minimum amount of
	// compute resources required.
	requests?: null | #ResourceObject @go(Requests,*ResourceObject)
}

#ResourceObject: {
	cpu:    float64    @go(CPU)
	memory: #BytesSize @go(Memory)
}

#Platform: {
	os?:      string @go(OS)
	arch?:    string @go(Arch)
	variant?: string @go(Variant)
	version?: string @go(Version)
}

#Volume: {
	name?: string                 @go(Name)
	temp?: null | #VolumeEmptyDir @go(EmptyDir,*VolumeEmptyDir)
	host?: null | #VolumeHostPath @go(HostPath,*VolumeHostPath)
}

#VolumeDevice: {
	name?: string @go(Name)
	path?: string @go(DevicePath)
}

#VolumeMount: {
	name?: string @go(Name)
	path?: string @go(MountPath)
}

#VolumeEmptyDir: {
	medium?:     string     @go(Medium)
	size_limit?: #BytesSize @go(SizeLimit)
}

#VolumeHostPath: {
	path?: string @go(Path)
}

#Workspace: {
	base?: string @go(Base)
	path?: string @go(Path)
}
